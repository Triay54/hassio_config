- alias: Buenas noches
  id: 'buenas_noches'
  trigger:
    platform: time_pattern
    minutes: '/5'
  condition:
    # At night
    - condition: time
      after: '23:50:00'
      before: '05:00:00'

    # Not playing anything for a time
    - condition: state
      entity_id: media_player.tele
      state: 'off'
      for:
        minutes: 15

    # Lights off
    - condition: state
      entity_id: light.dormitorio
      state: 'off'
      for:
        minutes: 3
    - condition: state
      entity_id: light.salon
      state: 'off'
      for:
        minutes: 5
    - condition: state
      entity_id: light.hall_light
      state: 'off'
      for:
        minutes: 5
    - condition: state
      entity_id: light.estudio
      state: 'off'
      for:
        minutes: 5
    - condition: state
      entity_id: light.terraza
      state: 'off'
      for:
        minutes: 5

#    # Family at home
#    - condition: state
#      entity_id: group.family
#      state: 'home'
#      for:
#        minutes: 10
    - condition: template
      value_template: '{{ (states.person.eugenio.state == "home") or (states.person.carmen.state == "home") }}'

    # Low Light level in office
    - condition: template
      value_template: '{{ (states.sensor.sensor_office_illumination.state|int < 50) }}'

    # No multi-trigger!
    - condition: template
      value_template: '{% if states.script.good_night.attributes.last_triggered %}{{as_timestamp(now()) - as_timestamp(states.script.good_night.attributes.last_triggered) > 12 * 3600}}{% else %}{{ 1 > 0 }}{% endif %}'
  action:
    # Run good_night script
  - service: script.turn_on
    entity_id: script.good_night

#    # Notify script run
#  - service: persistent_notification.create
#    data:
#      title: '¡Buenas noches!'
#      message: "Script de buenas noches auto-activado en {{ as_timestamp(now())| timestamp_local}}."
#      notification_id: "good_night_notif"

- alias: Encendido de TV si apagada y KODI play
  id: 'tv_on_if_off_and_kodi_play'
  trigger:
    platform: state
    entity_id: media_player.kodi
    from: 'off'
    to: 'playing'
  action:
  - service: media_player.turn_on
    entity_id: media_player.tv
  - service: telegram_bot.send_message
    data_template:
      title: '*TV ON*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: 'Encendido de TV automático en Kodi PLAY'
      disable_notification: true
      inline_keyboard:
        - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call media_player.turn_on media_player.tele, ◼︎:/service_call media_player.media_stop media_player.kodi_app
        - Luces salón:/service_call light.toggle group.luces_salon, +:/init
#
- alias: Apagado de TV si encendida con salvapantallas
  id: 'tv_off_if_screensaver_some_time'
  trigger:
    platform: state
    entity_id: binary_sensor.tv_in_screen_saver
    to: 'on'
#    entity_id: media_player.tele
#    to: 'idle'
    for:
      minutes: 7
  action:
  - service: media_player.turn_off
    entity_id: media_player.tele
  - service: telegram_bot.send_message
    data_template:
      title: '*TV OFF*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: 'Apagado de TV automático (en salvapantallas > 7 min)'
      disable_notification: true
      inline_keyboard:
        - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call media_player.turn_on media_player.tele, ◼︎:/service_call media_player.media_stop media_player.tele
        - Luces salón:/service_call light.toggle group.luces_salon, +:/init

- alias: Apagado de CAM salón en Kodi PLAY nocturno
  id: 'cam_off_if_kodi_night'
  trigger:
  - platform: state
    entity_id: media_player.kodi_tv
#    from: 'idle'
    to: 'playing'
  - platform: state
    entity_id: media_player.fire_tv
#    from: 'idle'
    to: 'playing'
  condition:
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-0:30:00"
        - condition: numeric_state
          entity_id: sensor.sensor_livingroom_illumination
          below: 25
    - condition: state
#      entity_id: switch.camara
      entity_id: switch.tplink1
      state: 'on'
  action:
  - service: switch.turn_off
#    entity_id: switch.camara
    entity_id: switch.tplink1
  - service: telegram_bot.send_message
    data_template:
      title: '*CAM Salón OFF*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: 'Apagado de cámara de Salón en Kodi PLAY nocturno.'
      disable_notification: true
      inline_keyboard:
        - CAM OFF:/service_call switch.turn_off switch.tplink1, CAM ON:/service_call switch.turn_on switch.tplink1, +:/init

- alias: Encendido automático de CAM salón
  id: 'cam_auto_on'
  trigger:
  - platform: state
    entity_id: media_player.kodi_tv
    to: 'off'
    for:
      minutes: 5
  - platform: state
    entity_id: media_player.fire_tv
    to: 'off'
    for:
      minutes: 5
  condition:
    - condition: state
      entity_id: switch.tplink1
      state: 'off'
  action:
  - service: switch.turn_on
    entity_id: switch.tplink1

# LAN/BT discover --> event device_tracker_new_device
- alias: New BT device notifier
  id: 'new_device_notify'
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
  - service: notify.ios_iphone_beta
    alias: Notify new BT device
    data_template:
      title: "Nuevo dispositivo detectado"
      message: "entity_id:\n* {{ trigger.event.as_dict()['data']['entity_id'] }}. Hostname: {{ trigger.event.as_dict()['data']['host_name'] }}"
      data:
        push:
          badge: 1
          sound: "US-EN-Alexa-Motion-Detected-Generic.wav"
          category: "confirm" # Needs to match the top level identifier you used in the ios configuration
          action_data: # Anything passed in action_data will get echoed back to Home Assistant.
            entity_id: light.cuenco
            event: event
  - service: notify.gmail
    data_template:
      title: "HASS - Nuevo dispositivo detectado"
      message: "entity_id: {{ trigger.event.as_dict()['data']['entity_id'] }}. Hostname: {{ trigger.event.as_dict()['data']['host_name'] }} [EVENT: {{ trigger.event.as_dict()['event_type'] }}]\n\nRAW: {{ trigger.event.as_dict() }}\n\nDEV TRACKER ATTRS: {{ states.device_tracker[trigger.event.as_dict()['data']['entity_id'].split('.')[1]].attributes }}"

# Sun notifications
#- alias: Notify sunrise
#  trigger:
#    platform: sun
#    event: sunrise
#    offset: '+00:00:00'
#  action:
#    service: notify.ios
#    data:
#      title: 'Buenos días!'
#      message: 'Empieza un nuevo día!'
#      data:
#        push:
#          badge: 0
#          sound: "US-EN-Morgan-Freeman-Good-Morning.wav"
#          category: "alarm" # Needs to match the top level identifier you used in the ios configuration

- alias: Notify sunset
  id: 'sunset_notify'
  trigger:
    platform: sun
    event: sunset
    offset: '+00:00:00'
  action:
  - service: telegram_bot.send_message
    data_template:
      title: 'Empieza la noche!'
      message: 'Acaba de ponerse el sol... ¿Encendemos luces?'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: true
      inline_keyboard:
        - Luz salón:/service_call light.toggle group.luces_salon, Luz dormitorio:/service_call light.toggle group.luces_dormitorio
        - Luz cocina:/service_call switch.toggle switch.cocina, Luz estudio:/service_call switch.toggle switch.estudio_light_relay, +:/init

#  - service: notify.ios_iphone
#    data:
#      title: 'Empieza la noche!'
#      message: 'Acaba de ponerse el sol..'
#      data:
#        push:
#          badge: 0
#          sound: "US-EN-Morgan-Freeman-Setting-The-Mood.wav"
#          category: "confirm"

# Set a light scene with a python_script
- alias: Salón Select Scene
  id: 'select_scene_in_living_room'
  trigger:
    platform: state
    entity_id: input_select.salon_light_scene
  action:
    - service: python_script.select_light_profile
      data_template:
        scene: '{{ trigger.to_state.state }}'

# Set a TV source with a python_script
- alias: TV Source Select
  id: 'select_tv_source'
  trigger:
    platform: state
    entity_id: input_select.tv_source
  action:
    - service: python_script.select_tv_source
      data_template:
        scene: '{{ trigger.to_state.state }}'

- alias: Tono Salón
  id: 'set_color_temp_in_living_room'
  trigger:
    platform: state
    entity_id: input_number.light_temp_slider_salon
  action:
    - service: light.turn_on
      data:
        entity_id:
          - light.bola_grande
          - light.cuenco
          - light.tira
          - light.central
          - light.pie_sofa
          - light.pie_tv
      data_template:
        color_temp: '{{ (states( "input_number.light_temp_slider_salon" )|round(0) * (500 - 155) / 100 + 155)|int }}'

- alias: Brillo Salón
  id: 'set_brightness_in_living_room'
  trigger:
    platform: state
    entity_id: input_number.light_main_slider_salon
  action:
    - service: light.turn_on
      data:
        entity_id:
          - light.salon
      data_template:
        brightness: '{{ states( "input_number.light_main_slider_salon" )|round( 0 ) }}'

#- alias: Brillo Salón Sync
#  trigger:
#    - platform: state
#      entity_id: light.bola_grande
#      to: "on"
#  action:
#    - service: automation.turn_off
#      entity_id: automation.brillo_salon
#    - service: input_number.select_value
#      data:
#        entity_id: input_number.light_main_slider_salon
#      data_template:
#        value: '{{ trigger.to_state.attributes.brightness|int }}'
#    - service: automation.turn_on
#      entity_id: automation.brillo_salon

# Startup notifications, default states, and more to run at HA start
- alias: Start HomeAssistant
  id: 'hass_startup'
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: shell_command.cmd_init_ssh_identity
    - service: python_script.set_telegram_chatid_sensor
      data:
        chat_id: !secret telegram_bot_chat_id_admin
    - service: python_script.start_states

# New version notify
- alias: Update notifications
  id: 'update_available_notify'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
  - service: notify.ios_iphone
    data:
      title: 'New Home Assistant Release'
      message: "Home Assistant  {{ states.updater.updater.state }}  is now available."
      data:
        push:
          badge: 1
          category: "confirm"

- alias: Turn ON TV with lights (hue switch)
  id: 'turn_on_tv_dimmer_switch_action'
  trigger:
    platform: state
    entity_id: sensor.hue_dimmer_switch
    to: '1_hold_up'
  action:
    - service: python_script.start_kodi_play_tv
    - event: flash_light
      event_data:
        color: orange
        persistence: 2
        flashes: 3

- alias: Turn OFF all (hue switch)
  id: 'turn_off_all_dimmer_switch_action'
  trigger:
    platform: state
    entity_id: sensor.hue_dimmer_switch
    to: '4_hold_up'
  action:
    - service: media_player.turn_off
      entity_id: media_player.tele,media_player.salon
    - event: flash_light
      event_data:
        color: red
        persistence: 1
        flashes: 2
    - delay:
        seconds: 5
    - service: homeassistant.turn_off
      entity_id: group.all_lights
    - service: telegram_bot.send_message
      data_template:
        title: '*All Off*'
        message: "Apagando TV y luces al mantener pulsado OFF en mando hue"
        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        disable_notification: true
        inline_keyboard:
          - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call media_player.turn_on media_player.tele
          - Aura habitación:/service_call light.toggle light.aura_habitacion

- alias: Turn TV Night scene (hue switch)
  id: 'turn_tv_night_scene_dimmer_switch_action'
  trigger:
    platform: state
    entity_id: sensor.hue_dimmer_switch
    to: '3_hold_up'  # '-' button
  action:
    - service: input_select.select_option
      entity_id: input_select.salon_light_scene
      data:
        option: "TV Night"

#- alias: Turn Cinema mode ON (hue switch)
#  id: 'turn_on_cinema_mode_dimmer_switch_action'
#  trigger:
#    platform: state
#    entity_id: sensor.hue_dimmer_switch
#    to: '3_hold_up'
#  action:
#    - service: media_player.turn_on
#      entity_id: media_player.kodi
#    - event: flash_light
#      event_data:
#        color: blue
#        persistence: 2
#        flashes: 3
#    - delay:
#        seconds: 5
#    - service: script.update_library
#    - service: switch.turn_on
#      entity_id: switch.toggle_kodi_ambilight
#    - service: telegram_bot.send_message
#      data_template:
#        title: '*Cinema mode ON*'
#        message: ""
#        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
#        disable_notification: true
#        inline_keyboard:
#          - Ambilight:/service_call switch.toggle switch.toggle_kodi_ambilight, Luces:/service_call light.toggle light.salon

- alias: Morning Turn OFF (hue switch)
  id: 'morning_turn_off_dimmer_switch_action'
  trigger:
    platform: state
    entity_id: sensor.interruptor_dormitorio
    to: '4_hold_up'
  action:
    - service: homeassistant.turn_off
      entity_id: light.dormitorio,input_boolean.manual_trigger_lacafetera,switch.calentador,switch.03200296dc4f22293a7f
#    - event: flash_light
#      event_data:
#        color: red
#        persistence: 1
#        flashes: 2
#    - delay:
#        seconds: 5
    - service: telegram_bot.send_message
      data_template:
        title: '*All Off*'
        message: "Apagando Despertador y termo al mantener pulsado OFF en mando hue"
        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        disable_notification: true
        inline_keyboard:
          - Aura habitación:/service_call light.toggle light.aura_habitacion
    - service: media_player.turn_off
      entity_id: media_player.dormitorio


- alias: Encendido luces dormitorio
  id: 'ligths_on_bedroom'
  trigger:
    platform: state
    entity_id: binary_sensor.sensor_bedroom_mov1
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family
        state: 'home'
      - condition: state
        entity_id: light.dormitorio
        state: 'off'
        for:
          seconds: 30
      - condition: state
        entity_id: alarm_control_panel.alarma
        state: 'disarmed'
#      - condition: template
#        value_template: '{{ states.sensor.sensor_bedroom_illumination.state | int < 15 }}'
      - condition: time
        after: '8:30:00'
        before: '22:30:00'
  action:
    - service: python_script.select_light_profile
      data_template:
        scene: 'bedroom_activate_minimal'
#    - service: light.turn_on
#      data:
#        entity_id: light.aura_habitacion
#        brightness: 222
#        xy_color: [0.3945,0.406]

- alias: Encendido luces estudio
  id: 'ligths_on_study'
  trigger:
    platform: state
    entity_id: binary_sensor.sensor_study_mov1
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family
        state: 'home'
      - condition: state
        entity_id: light.estudio
        state: 'off'
        for:
          seconds: 30
      - condition: state
        entity_id: alarm_control_panel.alarma
        state: 'disarmed'
      - condition: template
        value_template: '{{ states.sensor.sensor_study_illumination.state | int < 15 }}'
      - condition: time
        after: '8:30:00'
        before: '23:00:00'
  action:
    - service: python_script.select_light_profile
      data_template:
        scene: 'Estudio'

#- alias: Luz hall abriendo cuadro
#  id: 'luz_hall_abriendo_cuadro'
#  trigger:
#    platform: state
#    entity_id: binary_sensor.local_pir
#    to: 'on'
#  condition:
#    - condition: numeric_state
#      entity_id: sensor.sensor_hall_illumination
#      below: 50
#    - condition: state
#      entity_id: light.hall_light
#      state: 'off'
#      for:
#        seconds: 10
#  action:
#    - service: light.turn_on
#      data:
#        entity_id: light.hall_light

- alias: Botvac error notification
  id: 'botvac_error_notify'
  trigger:
    platform: state
    entity_id: vacuum.robot_aspirador
  condition:
    condition: template
    value_template: '{{ "error" in states.vacuum.robot_aspirador.attributes }}'
  action:
    service: telegram_bot.send_message
    data_template:
      title: '*Botvac Error*'
      message: >
        El robot aspirador ha fallado: _{{ states.vacuum.robot_aspirador.attributes.error }}_
        (Status: {{ states.vacuum.robot_aspirador.attributes.status }}, batt: {{ states.vacuum.robot_aspirador.attributes.battery_level }} %)
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: false
      inline_keyboard:
        - Locate botvac:/service_call vacuum.locate vacuum.robot_aspirador, To dock:/service_call vacuum.return_to_home vacuum.robot_aspirador
        - Start:/service_call vacuum.start_pause vacuum.robot_aspirador, Stop:/service_call vacuum.stop vacuum.robot_aspirador, +:/init

- alias: Carmen sale del hospital
  id: 'dev_tracker_carmen_out_hospital'
  trigger:
    - platform: zone
      entity_id: device_tracker.homeadmin_iphonese
      zone: zone.hospital
      event: leave #enter  # or "leave"
#      for:
#        minutes: 5
    - platform: zone
      entity_id: device_tracker.iphonese
      zone: zone.hospital
      event: leave #enter  # or "leave"
#      for:
#        minutes: 5
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Salida del Hospital*'
        target: !secret telegram_bot_chat_id_admin
        message: 'Carmen ha salido del hospital *hace 5 minutos*, al menos.'

- alias: Carmen llega al hospital
  id: 'dev_tracker_carmen_in_hospital'
  trigger:
#    - platform: zone
#      entity_id: device_tracker.homeadmin_iphonese
#      zone: zone.hospital
#      event: enter  # or "leave"
##      for:
##        minutes: 5
    - platform: zone
      entity_id: device_tracker.iphonese
      zone: zone.hospital
      event: enter  # or "leave"
#      for:
#        minutes: 5
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Llegada a Hospital*'
        target: !secret telegram_bot_chat_id_admin
        message: 'Carmen acaba de llegar al hospital.'
        disable_notification: true

- alias: Aviso de sensor MQTT offline
  id: 'mqtt_sensor_go_offline_notify'
  trigger:
    - platform: state
      entity_id: binary_sensor.esp32_ener_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_bedroom_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_livingroom_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_covers_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_study_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_office_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_kitchen_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_hall_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_terraza_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_galeria_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_bathroom_ac_snum
      to: 'unknown'
      for:
        minutes: 2
    - platform: state
      entity_id: sensor.sensor_wine_snum
      to: 'unknown'
      for:
        minutes: 10
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Sensor offline*'
        target: !secret telegram_bot_chat_id_admin
        message: "El micro ESP [`{{ trigger.to_state.attributes.friendly_name }}`] parece que *ha fallado*. Revísalo!"

- alias: Aviso de sensor MQTT online
  id: 'mqtt_sensor_go_online_notify'
  trigger:
    - platform: state
      entity_id: sensor.esp32_ener_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_bedroom_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_livingroom_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_covers_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_study_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_office_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_kitchen_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_hall_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_terraza_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_galeria_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_bathroom_ac_snum
      from: 'unknown'
    - platform: state
      entity_id: sensor.sensor_wine_snum
      from: 'unknown'
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Sensor online*'
        target: !secret telegram_bot_chat_id_admin
#        message: "El micro ESP [`{{ trigger.to_state.attributes.friendly_name }}`] parece que *ha revivido*: `{{ trigger.to_state.attributes }}`. Estaba desaparecido desde {{ as_timestamp(trigger.from_state.last_changed) | timestamp_local }}."
        message: "El micro ESP `{{ trigger.to_state.attributes.friendly_name[9:]}}` parece que ha **revivido**: Wake_{{ trigger.to_state.attributes.status.wake }}(WR:{{ trigger.to_state.attributes.status.wake_reason }},ERR:{{ trigger.to_state.attributes.status.c_error }}); Wifi -> {{ trigger.to_state.attributes.wifi_ap }} [CH {{ trigger.to_state.attributes.network.CH }}, RSSI: {{ trigger.to_state.attributes.rssi }}, IP_{{ trigger.to_state.attributes.ip[10:] }}]. Estaba desaparecido desde hace {{ ((now() - trigger.from_state.last_changed).total_seconds() / 60) | round(1) }} min."
        disable_notification: true

- alias: Sync Tira TV con Tira sofá
  id: 'sync_light_strips'
  trigger:
    - platform: state
      entity_id: light.tira
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: media_player.tv
        state: 'off'
      - condition: or
        conditions:
          - condition: state
            entity_id: light.tira
            state: 'on'
          - condition: state
            entity_id: light.tira
            state: 'off'
  action:
    - service: python_script.sync_yeelight
      data_template:
        new_state: '{{ trigger.to_state.state }}'

- alias: Apagado automático de termo ACS
  id: 'termo_auto_off'
  trigger:
    platform: numeric_state
    entity_id: sensor.esp32ener_ch2
    # At least one of the following required
#    above: 17
    below: 300
    # If given, will trigger when condition has been for X time.
    for:
      minutes: 2
#      seconds: 30
  condition:
    - condition: state
      entity_id: switch.calentador
      state: 'on'
      for:
        minutes: 15
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Calentador apagado*'
        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        message: 'El calentador de agua ya ha llegado a su temperatura de consigna, así que lo he apagado, junto a la bomba de circulación. ON: {{((now() - states.switch.calentador.last_changed).total_seconds() / 3600)|round(2)}} h'
        disable_notification: true
        inline_keyboard:
          - Encender Calentador:/service_call switch.turn_on switch.calentador, Apagar Calentador:/service_call switch.turn_off switch.calentador
          - Encender bomba ACS:/service_call switch.turn_on switch.03200296dc4f22293a7f, Apagar bomba ACS:/service_call switch.turn_off switch.03200296dc4f22293a7f
    - service: switch.turn_off
      entity_id: switch.calentador,switch.03200296dc4f22293a7f

- alias: Notificación de cambio de IP
  id: 'notif_cambio_ip'
  trigger:
    platform: state
    entity_id: sensor.ip_externa
  condition:
    condition: template
    value_template: "{{ (trigger.to_state.state | length > 10) and (trigger.to_state.state != 'unavailable') }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Cambio de IP*'
        target: !secret telegram_bot_chat_id_admin
        message: 'La IP pública se acaba de renovar: *{{ trigger.to_state.state }}*, la anterior era: _{{ trigger.from_state.state }}_'
        disable_notification: true

- alias: Vacuum select rooms to clean
  id: 'select_rooms_to_clean'
  trigger:
    platform: state
    entity_id: input_select.vacuum_clean_combination
  action:
    - service: python_script.select_vacuum_cleaning
      data_template:
        room: '{{ trigger.to_state.state }}'

- alias: Botvac reset select command
  id: 'botvac_reset_select_command'
  trigger:
    platform: time_pattern
    minutes: '/5'
#  trigger:
#    platform: state
#    entity_id: vacuum.robot_aspirador
#    to: 'off'
  condition:
    condition: template
    value_template: '{{ (states.vacuum.robot_aspirador.state == "docked") and (states.vacuum.robot_aspirador.attributes.status == "Charging") and (states.input_select.vacuum_clean_combination.state != "Nada") }}'
  action:
    service: input_select.select_option
    entity_id: input_select.vacuum_clean_combination
    data:
      option: "Nada"

#- alias: Apagado automático de enchufes a las 6h
#  id: 'switches_auto_off_after_8hours'
#  trigger:
#    - platform: state
#      entity_id: switch.test_switch_2
#      to: 'on'
#      for:
#        hours: 6
#    - platform: state
#      entity_id: switch.office_floor
#      to: 'on'
#      for:
#        hours: 6
#  action:
#    - service: switch.turn_off
#      entity_id: switch.test_switch_2,switch.office_floor
#    - service: telegram_bot.send_message
#      data_template:
#        title: '*Auto-OFF* de {{ trigger.to_state.attributes.friendly_name }}'
#        target: !secret telegram_bot_chat_id_admin
#        message: "El enchufe {{ trigger.to_state.attributes.friendly_name }} [`{{ trigger.entity_id }}`] *se ha apagado tras {{ (trigger.for.total_seconds() / 3600) | round(1) }}h encendido* (en ON desde {{ as_timestamp(trigger.to_state.last_changed) | timestamp_local }})"
#        disable_notification: true
#        inline_keyboard:
#          - Antimosquitos Dormitorio ON:/service_call switch.turn_on switch.test_switch_2, Apagar Antimosquitos Dormitorio OFF:/service_call switch.turn_off switch.test_switch_2
#          - Antimosquitos Salón ON:/service_call switch.turn_on switch.office_floor, Antimosquitos Salón OFF:/service_call switch.turn_off switch.office_floor

#- alias: Retry etekcity commands
#  id: 'retry_etekcity_commands'
#  trigger:
#    - platform: state
#      entity_id: switch.vinoteca
#      to: 'on'
#      for:
#        seconds: 10
#    - platform: state
#      entity_id: switch.camara
#      to: 'on'
#      for:
#        seconds: 30
##    - platform: state
##      entity_id: switch.altavoz
##      to: 'on'
##      for:
##        seconds: 20
#    - platform: state
#      entity_id: switch.test_switch_2
#      to: 'on'
#      for:
#        seconds: 20
#    - platform: state
#      entity_id: switch.office_floor
#      to: 'on'
#      for:
#        seconds: 20
#    - platform: state
#      entity_id: switch.vinoteca
#      to: 'off'
#      for:
#        seconds: 10
#    - platform: state
#      entity_id: switch.camara
#      to: 'off'
#      for:
#        seconds: 30
##    - platform: state
##      entity_id: switch.altavoz
##      to: 'off'
##      for:
##        seconds: 20
#    - platform: state
#      entity_id: switch.test_switch_2
#      to: 'off'
#      for:
#        seconds: 20
#    - platform: state
#      entity_id: switch.office_floor
#      to: 'off'
#      for:
#        seconds: 20
#  action:
#    - service_template: 'switch.{% if trigger.to_state.state == "off" %}turn_off{% else %}turn_on{% endif %}'
#      data_template:
#        entity_id: '{{ trigger.entity_id }}'
##    - service: telegram_bot.send_message
##      data_template:
##        title: '*Auto-Retry* de {{ trigger.to_state.attributes.friendly_name }}'
##        target: !secret telegram_bot_chat_id_admin
##        message: "Se reintenta la orden al enchufe {{ trigger.to_state.attributes.friendly_name }} [`{{ trigger.entity_id }}`] (en {{ trigger.to_state.state }} desde {{ as_timestamp(trigger.to_state.last_changed) | timestamp_local }})"
##        disable_notification: true

- alias: IFTTT incoming event
  id: 'ifttt_incoming_event'
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      motion: on
  action:
    service: python_script.incoming_ifttt_data
    data_template:
      message: '{{ trigger.event.data.message }}'

- alias: Expire video motion sensors in WyzeCams
  id: "expire_video_motion_sensors_in_wyzecams"
  trigger:
  - platform: state
    entity_id: binary_sensor.motioncam_wyzecam2
    to: 'on'
    for:
      minutes: 3
  - platform: state
    entity_id: binary_sensor.motioncam_wyzecam1
    to: 'on'
    for:
      minutes: 3
  - platform: state
    entity_id: binary_sensor.motioncam_wyzecampan
    to: 'on'
    for:
      minutes: 3
  action:
    service: python_script.incoming_ifttt_data
    data_template:
      message: 'RESET'
      entity_id: '{{ trigger.to_state.entity_id }}'

- alias: Apagado de AC
  id: 'auto_turnoff_ac'
  trigger:
    - platform: state
      entity_id: climate.termostato_ac
      from: 'cool'
      to: 'idle'
      for:
        seconds: 30
    - platform: state
      entity_id: climate.calefaccion
      from: 'heat'
      to: 'idle'
      for:
        seconds: 30
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Auto-OFF* de {{ trigger.to_state.attributes.friendly_name }}'
#        target: !secret telegram_bot_chat_id_admin
        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        message: "Apagado de {{ trigger.to_state.attributes.friendly_name }} (Tª: {{ trigger.to_state.attributes.current_temperature }} °C / target: {{ trigger.to_state.attributes.temperature }} °C) (en `{{ trigger.from_state.state }}` desde {{ as_timestamp(trigger.from_state.last_changed) | timestamp_local }})"
        disable_notification: true
        inline_keyboard:
          - Deshacer COOL:/service_call climate.set_operation_mode termostato_ac cool
          - Deshacer HOT:/service_call climate.set_operation_mode calefaccion heat
    - service: climate.set_operation_mode
      data:
        entity_id: climate.termostato_ac
        operation_mode: 'off'
    - service: climate.set_operation_mode
      data:
        entity_id: climate.calefaccion
        operation_mode: 'off'
    # Assure 1 trigger only
    - service: automation.turn_off
      entity_id: automation.apagado_de_ac

- alias: Alerta de batería baja
  id: 'battery_is_near_dead'
  trigger:
    - platform: numeric_state
      entity_id: sensor.ipad_de_eugenio_battery_level
      below: 35
  condition:
    - condition: state
      entity_id: sensor.ipad_de_eugenio_battery_state
      state: 'Unplugged'
      for:
        hours: 1
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Batería baja en {{ trigger.to_state.attributes.friendly_name }}*'
        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        message: "Pon a cargar el {{ trigger.to_state.attributes['Device Type'] }} (Batería: {{ trigger.to_state.state }} %)"
        disable_notification: false

- alias: Alerta de puerta de entrada
  id: 'main_door_open'
  trigger:
    - platform: state
      entity_id: input_boolean.mirror_eve_main_door
      to: 'on'
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Puerta abierta*'
        target: !secret telegram_bot_chat_id_admin
        #        target: '{{ states.sensor.telegram_default_chatid.state | int }}'
        message: "Detección de {{ trigger.to_state.attributes.friendly_name }}. Cerrada (`{{ trigger.from_state.state }}`) desde {{ as_timestamp(trigger.from_state.last_changed) | timestamp_local }}"
        disable_notification: false
    - service: python_script.main_door_opening
      data_template:
        last_state_ts: '{{ trigger.from_state.last_changed }}'
